# https://github.com/githubuniverseworkshops/GitHub-Actions-Planet-GitHubUniverse2021
name: Create repository with IssueOps
on:
  issues:
    types: [opened]

jobs:
  Create-Repo:
    runs-on: ubuntu-latest
    environment: ci-cd-scripts
    if: contains(github.event.issue.labels.*.name, 'issueops:new-repo')
    env:
      # ID of Milestone to group the issue in
      MILESTONE: 1
    steps:
        
      - name: Print Context
        uses: actions/github-script@v5
        with:
          script: |
            console.log(context)
            
      - name: Create GitHub Repo
        id: create-github-repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            bodySplit = context.payload.issue.body.split("\n")
            # Set vars for this step
            let newRepo = bodySplit[2]
            let templateRepo = bodySplit[6]
            let teams = bodySplit[10]
            let enableIssue = bodySplit[14].includes("X")
            let enableProject = bodySplit[18].includes("X")
            let enableSquashMerge = bodySplit[22].includes("X")
            let enableForking = bodySplit[26].includes("X")
            # Set vars for subsequent steps
            core.setOutput('newRepo', newRepo);
            core.setOutput('org', context.payload.organization.login);
            core.setOutput('teams', teams);
            core.setOutput('enableIssue', enableIssue);
            core.setOutput('enableProject', enableProject);
            core.setOutput('enableSquashMerge', enableSquashMerge);
            core.setOutput('enableForking', enableForking);
            # Print vars to the log
            console.log("New repository name: " + bodySplit[2])
            console.log("Template Repository: " + bodySplit[6])
            console.log("Team: " + bodySplit[10])
            console.log("Enable Issue: " +  bodySplit[14].includes("X"))
            console.log("Enable Project: " +  bodySplit[18].includes("X"))
            console.log("Allow Squash Merge: " +  bodySplit[22].includes("X"))
            console.log("Allow Forking: " +  bodySplit[26].includes("X"))
            
            console.log("New repo: " + newRepo + " Template Repo: " + templateRepo + " Teams: " + teams)
            
            console.log("Commenting on issue '" + context.payload.issue.title + "' - " + context.payload.issue.html_url)
            try { 
              await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Workflow [' + context.workflow + ' #' + context.runNumber + '](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ') has picked up this issue'
             }) 
            } catch(err) {
              core.setFailed(`Action failed with error ${err}`);
            }
            
            console.log("Adding issue to Milestone [${{ env.MILESTONE }}]")
            try {
              await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: ${{ env.MILESTONE }}
             }) 
            } catch(err) {
              core.setFailed(`Action failed with error ${err}`);
            }
            
            console.log("Creating repo from template")
            try {
              await github.rest.repos.createUsingTemplate({
                template_owner: context.payload.organization.login,
                template_repo: templateRepo,
                name: newRepo,
                owner: context.payload.organization.login,
                description: "Test",
                include_all_branches: true,
                private: false
              })
            } catch(err) {
              core.setFailed(`Action failed with error ${err}`);
            }
            
#            console.log("Configuring repo")
#            try {
#              await github.rest.repos.update({
#                owner: context.payload.organization.login,
#                private: false,
#                repo: newRepo,
#                has_issues: enableIssue,
#                has_projects: enableProject,
#                allow_squash_merge: enableSquashMerge
#              })
#            } catch(err) {
#              core.setFailed(`Action failed with error ${err}`);
#            }
#            
#            console.log("Updating repo branch permissions")
#            try {
#              await github.rest.repos.updateBranchProtection({
#                "owner": context.payload.organization.login,
#                "repo": newRepo,
#                "branch": 'main',
#                "required_status_checks": { "strict": true, "contexts": [] },
#                "enforce_admins": true,
#                "required_pull_request_reviews": {"dismissal_restrictions": {"users":[], "teams":[]}, "dismiss_stale_reviews": false, "require_code_owner_reviews": true, "required_approving_review_count": 1},
#                "restrictions" : { "users": [], "teams": [], "apps": [] }
#              })
#            } catch(err) {
#              core.setFailed(`Action failed with error ${err}`);
#            }
#            
#            console.log("Setting Team repo permissions")
#            try {
#              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
#                org: context.payload.organization.login,
#                owner: context.payload.organization.login,
#                repo: newRepo,
#                team_slug: teams,
#                permission: 'admin'
#              })
#            } catch(err) {
#              core.setFailed(`Action failed with error ${err}`);
#            }
#            
#            console.log("Commenting on issue '" + context.payload.issue.title + "' - " + context.payload.issue.html_url)
#            try { 
#              await github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: 'Thanks for creating a repo. Your new repo is available at: https://github.com/' + context.payload.organization.login + "/" + newRepo
#             }) 
#            } catch(err) {
#              core.setFailed(`Action failed with error ${err}`);
#            }
#            
#            console.log("Closing issue")
#            try {
#              await github.rest.issues.update({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              state: 'closed'
#             }) 
#            } catch(err) {
#              core.setFailed(`Action failed with error ${err}`);
#            }

  # https://docs.github.com/en/actions/learn-github-actions/reusing-workflows
  Configure-Repo:
    uses: ci-cd-scripts/called-workflows/.github/workflows/configure-repo.yml@main
    needs: Create-Repo
    with:
      org:                ${{ needs.Create-Repo.outputs.org }}
      repo-name:          ${{ needs.Create-Repo.outputs.newRepo }}
      teams:              ${{ needs.Create-Repo.outputs.teams }}
      enableIssue:        ${{ needs.Create-Repo.outputs.enableIssue }}
      enableProject:      ${{ needs.Create-Repo.outputs.enableProject }}
      enableSquashMerge:  ${{ needs.Create-Repo.outputs.enableSquashMerge }}
      enableForking:      ${{ needs.Create-Repo.outputs.enableForking }}
    secrets:
      caller-token: ${{ secrets.ORG_TOKEN }}
